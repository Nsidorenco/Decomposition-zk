(* Formalization of Sigma Protocols *)
require import AllCore Distr DBool List FSet.
(** Ignore: This is now the preferred setup but is not yet the default **)
pragma -oldip. pragma +implicits.

type statement.
type witness.
type message.
type challenge.
type response.

type transcript = message * challenge * response.

(* define the relations *)
op R (x : statement) (w : witness) : bool.

op dchallenge : {challenge distr | is_lossless dchallenge /\ is_funiform dchallenge} as dchallenge_llfuni.

lemma dchallenge_ll : is_lossless dchallenge by have []:= dchallenge_llfuni.
lemma dchallenge_funi : is_funiform dchallenge by have []:= dchallenge_llfuni.
lemma dchallenge_fu : is_full dchallenge by apply/funi_ll_full; [exact/dchallenge_funi|exact/dchallenge_ll].

(* Sigma Protocol Algoritms *)
module type SProtocol = {
  proc init(h : statement, w : witness) : message
  proc response(h : statement, w : witness,
                m : message, e : challenge) : response
  proc verify(h : statement, m : message, e : challenge, z : response) : bool
  proc witness_extractor(h : statement, m : message, e : challenge list, z : response list) : witness option
  proc simulator(h : statement, e : challenge) : message * response
}.

module Completeness (S : SProtocol) = {
  proc special(h : statement, w : witness, e : challenge) : bool = {
    var a, z, v;

    a <- S.init(h, w);
    z <- S.response(h, w, a, e);
    v <- S.verify(h, a, e, z);

    return v;
  }

  proc normal(h : statement, w : witness) : bool = {
    var a, e, z, v;

    a <- S.init(h, w);
    e <$ dchallenge;
    z <- S.response(h, w, a, e);
    v <- S.verify(h, a, e, z);

    return v;
  }

  proc main(h : statement, w : witness) : bool = {
    var e, v;

    e <$ dchallenge;
    v <- special(h, w, e);

    return v;
  }
}.

equiv normal_main (S <: SProtocol):
  Completeness(S).normal ~ Completeness(S).main : ={h, w, glob S} ==> ={res}.
proof. proc. inline *. swap{1} 2 -1. sim. qed.

lemma special_implies_main (S <: SProtocol) h' w':
  (forall h' w' e', phoare[Completeness(S).special : (h = h' /\ w = w' /\ e = e') ==> res] = 1%r) =>
  phoare[Completeness(S).main : (h = h' /\ w = w') ==> res] = 1%r.
proof.
    move=> ph_special. proc.
    seq 1 : (#pre /\ exists e', e = e'). auto. auto. progress.
    apply dchallenge_ll. by exists v0.
    elim*. progress.
    call (ph_special h' w' e'). auto.
    hoare. auto. progress.
      - by exists e0.
      - progress.
qed.

module SpecialSoundness(S : SProtocol) = {
  proc main(h : statement, m : message, c : challenge list, z : response list) : bool = {
    var w, w_get, valid_all, valid_tmp, c', z', c_copy, z_copy, ret;

    valid_all <- true;
    c_copy <- c;
    z_copy <- z;

    while (c_copy <> []) {
      c' <- oget (ohead c_copy);
      z' <- oget (ohead z_copy);
      valid_tmp <- S.verify(h, m, c', z');
      valid_all <- valid_all /\ valid_tmp;
      c_copy <- behead c_copy;
      z_copy <- behead z_copy;
    }

    w <- S.witness_extractor(h, m, c, z);
    if (w = None) {
      ret <- false;
    } else {
      w_get <- oget w;
      ret <- (undup c = c /\ (R h w_get) /\ valid_all);
    }

    return ret;

  }
}.

module SHVZK (S : SProtocol) = {
  proc real(h : statement, w : witness, e : challenge) : transcript option = {
    var a, z, v, ret;
    a <- S.init(h, w);
    z <- S.response(h, w, a, e);
    v <- S.verify(h, a, e, z);
    ret <- None;
    if (v) {
      ret <- Some (a, e, z);
    }
    return ret;
  }

  proc ideal(h : statement, e : challenge) : transcript option = {
    var a, z, v, ret;
    (a, z) <- S.simulator(h, e);
    v <- S.verify(h, a, e, z);
    ret <- None;
    if (v) {
      ret <- Some (a, e, z);
    }
    return ret;
  }
}.

lemma shvzk_real_never_fail (S <: SProtocol) h' w' e' &m:
    Pr[SHVZK(S).real(h', w', e') @ &m : (res <> None)] =
    Pr[Completeness(S).special(h', w', e') @ &m : res].
proof. byequiv=>//. proc. wp. by do ? call (: true). qed.
